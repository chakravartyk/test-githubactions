name: Boilerplate workflow
run-name: Generate boilerplate argocd-ska config

on:
  push:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  Generate-Boilerplate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: 'Step 1 - Checkout'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.OAUTH_GITHUB_KEY }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    # - name: Install Boilerplate
    #   id: boilerplate-image
    #   uses: chakravartyk/GHA-boilerplate@v13.6
    #   with:
    #     GRUNTWORK_INSTALLER_VERSION: v0.0.38
    #     BOILERPLATE_VERSION: v0.5.3
    #     GITHUB_OAUTH_TOKEN: ${{ secrets.OAUTH_GITHUB_KEY }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        push: true
        context: .
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: GITHUB_OAUTH_TOKEN=${{ secrets.OAUTH_GITHUB_KEY }}


    # - name: Verify Installation
    #   run: |
    #     set -e
    #     boilerplate -v

    # - name: Generate Boilerplate Template
    #   shell: bash
    #   run: |
    #     set -xeo pipefail
    #     environments=$(git diff -r --name-only origin/main...HEAD | grep -E ^infrastructure-template/environments/ | xargs dirname | sort -u)
    #     for env in $environments; do if [ $(ls $env) ]; then boilerplate --template-url ./infrastructure-template/blueprints --output-folder .  --non-interactive --var-file $env/* ; fi; done

    # - name: Push Boilerplate Output
    #   uses: stefanzweifel/git-auto-commit-action@v4
    #   with:
    #     commit_message: Generated boilerplate output

    # - name: Run Linting Checks
    #   run: |
    #     pip install pre-commit
    #     pre-commit run --from-ref origin/main --to-ref HEAD --verbose
    #   continue-on-error: true

    # - name: Push Lint Fix
    #   uses: stefanzweifel/git-auto-commit-action@v4
    #   with:
    #     commit_message: Fixed lint for boilerplate output
